#!/usr/bin/env python3
# -*- mode: python; -*-
#
# Copyright 2014, 2015 Canonical, Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from functools import partial
import argparse
import logging
import os
import sys

# Handle imports where the path is not automatically updated during install.
# This really only happens when a binary is not in the usual /usr/bin location
lib_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, lib_dir)

from cloudinstall import __version__ as version
from cloudinstall import utils
from cloudinstall.api.container import Container
from cloudinstall.core import Controller
from cloudinstall.ev import EventLoop
from cloudinstall.log import setup_logger
from cloudinstall.ui.frame import OpenStackStatusUI


def parse_options(argv):
    parser = argparse.ArgumentParser(description='Ubuntu Openstack Installer',
                                     prog='openstack-status',
                                     argument_default=argparse.SUPPRESS)
    parser.add_argument(
        '--version', action='version', version='%(prog)s {}'.format(version))
    return parser.parse_args(argv)

if __name__ == '__main__':
    opts = parse_options(sys.argv[1:])
    config = utils.read_ini_existing()

    if not config:
        print("No configuration found in ~/.cloud-install/config.yaml\n"
              "and no --config option passed. Please verify your\n"
              "installation and make sure ~/.cloud-install/config.yaml\n"
              "is there and correct.")
        sys.exit(1)

    try:
        setup_logger()
    except PermissionError:  # NOQA
        print("Permission error accessing log file.\n"
              "This probably indicates a broken partial install.\n"
              "Please use 'openstack-install -u' to uninstall, "
              "and try again.\n"
              "(You may want to save a copy of ~/.cloud-install/commands.log"
              " for reporting a bug.)")
        sys.exit(1)

    logger = logging.getLogger('cloudinstall')
    logger.info("Starting deployment of OpenStack")

    if os.path.isfile(config['settings']['pidfile']):
        print("Another instance of openstack-status is running. If you're "
              "sure there are no other instances, please remove "
              "~/.cloud-install/openstack.pid")
        sys.exit(1)

    # Run openstack-status within container on single installs
    out = utils.get_command_output('hostname', user_sudo=True)
    hostname = out['output'].rstrip()
    # FIXME: test against container from lxc-ls output
    if config.is_single() and config.getopt('container_name') not in hostname:
        logger.info("Running status within container")
        Container.run_status(config.getopt('container_name'),
                             'openstack-status', config)

    ui = OpenStackStatusUI()
    ev = EventLoop(ui, config, logger)

    core = Controller(ui=ui, loop=ev)
    # Create pidfile
    utils.spew(config['settings']['pidfile'],
               str(os.getppid()),
               utils.install_user())

    try:
        import atexit
        atexit.register(partial(utils.cleanup, config))
        core.start()
    except Exception as e:
        raise SystemExit(e)
    finally:
        sys.exit(ev.error_code)
