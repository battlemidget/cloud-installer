#!/usr/bin/env python3
# -*- mode: python; -*-
#
# Copyright 2014, 2015 Canonical, Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

""" CLI for installing Ubuntu OpenStack """

import argparse
import sys
import os
import logging
from functools import partial
from cloudinstall.log import setup_logger
import cloudinstall.utils as utils
from cloudinstall.ui.frame import OpenstackInstallUI
from cloudinstall.controllers.installbase import InstallController
from cloudinstall.ev import EventLoop
from cloudinstall import __version__ as version

CFG_DIR = os.path.join(utils.install_home(), '.cloud-install')
CFG_FILE = os.path.join(CFG_DIR, 'config.conf')


def parse_options(argv):
    parser = argparse.ArgumentParser(description='Ubuntu Openstack Installer',
                                     prog='openstack-install')
    parser.add_argument('-u', '--uninstall', action='store_true',
                        dest='uninstall', default=False,
                        help='Uninstalls the current cloud including removing '
                        'of packages.')
    parser.add_argument('--advanced-config', action="store_true",
                        help="Prompt user for setting advanced configuration "
                        "options", default=False)
    parser.add_argument('-g', '--get-config', type=str, dest='get_config',
                        default=None,
                        help="with arg <key>, prints config value for 'key' "
                        "to stdout and exits.")
    # parser.add_argument('--edit-placement', action='store_true',
    #                     dest='edit_placement', default=False,
    #                     help='Show machine placement UI before deploying')
    parser.add_argument('--upstream-deb', dest='upstream_deb',
                        help='Upload a local copy of openstack debian package '
                        'to be used in a single install. (DEVELOPERS)')
    parser.add_argument(
        '--version', action='version', version='%(prog)s {}'.format(version))
    return parser.parse_args(argv)


def set_config_defaults(config):
    config['settings'] = {
        'pidfile': os.path.join(CFG_DIR, 'openstack.pid'),
        'cfg_path': CFG_DIR,
        'cfg_file': CFG_FILE,
        'placements_file': os.path.join(CFG_DIR, 'placements.yaml'),
        'install_only': "no",
        'headless': "no"
    }
    config['settings.juju'] = {
        'path': os.path.join(CFG_DIR, 'juju'),
        'home': os.path.join(CFG_DIR, 'juju'),
        'home_expanded': "~/.cloud-install/juju",
        'environments_path': os.path.join(CFG_DIR, 'juju', 'environments'),
        'series': "trusty",
    }
    config['settings.single'] = {
        'container_name': 'openstack-single-{}'.format(utils.install_user())
    }
    return config


if __name__ == '__main__':
    opts = parse_options(sys.argv[1:])
    if opts.uninstall:
        msg = ("Warning:\n\nThis will uninstall OpenStack and "
               "make a best effort to return the system back "
               "to its original state.\n\n"
               "If you haven't backed up your ~/.cloud-install/config.conf "
               "nows a good time to do so before proceeding.")
        print(msg)
        yn = input("Proceed? [y/N] ")

        if "y" in yn or "Y" in yn:
            print("Restoring system to last known state.")
            os.execl('/usr/bin/openstack-uninstall', '')
        else:
            print("Uninstall cancelled.")
            sys.exit(1)

    if sys.getdefaultencoding() != 'utf-8':
        print("Ubuntu OpenStack Installer requires unicode support. "
              "Please enable this on the system running the installer.\n\n")
        print("Example:\n")
        print("  export LC_ALL=en_US.UTF-8")
        print("  export LANG=en_US.UTF-8")
        print("  export LANGUAGE=en_US.UTF-8")
        sys.exit(1)

    if opts.upstream_deb and not os.path.isfile(opts.upstream_deb):
        raise Exception("Upstream deb '{}' "
                        "not found.".format(opts.upstream_deb))

    if opts.get_config:
        conf_bin = "/usr/bin/openstack-config"
        os.execl(conf_bin, conf_bin, opts.get_config)

    # validate series exists for nclxd
    # if opts.use_nclxd and opts.ubuntu_series[0] < 'v':
    #     print("You must pass --series vivid or higher in order to use nclxd.")
    #     sys.exit(1)

    # New install, write default config
    if not os.path.exists(CFG_DIR):
        os.makedirs(CFG_DIR)
        utils.chown(CFG_DIR, utils.install_user())
        config = utils.read_ini('/usr/share/openstack/config.conf')
        config = set_config_defaults(config)
        utils.write_ini(config)
        with open(CFG_FILE, 'w') as config_w:
            config.write(config_w)
    elif os.path.isfile(CFG_FILE) and not opts.advanced_config:
        msg = ("An existing configuration was found at "
               "~/.cloud-install/config.conf. This could indicate an "
               "existing install. If you are wanting to do further "
               "customizations before install please re-try with \n\n"
               "$ sudo openstack-install --advanced-config\n\n"
               "This will bring up the installer in advanced configuration "
               "mode and allow you to fine-tune the install further.")
        print(msg)
        sys.exit(1)
    else:
        config = utils.read_ini_existing()

    if opts.advanced_config:
        config['runtime'] = {}
        config['runtime']['advanced_config'] = "yes"
        utils.write_ini(config)

    try:
        setup_logger()
    except PermissionError:  # NOQA
        print("Permission error accessing log file.\n"
              "This probably indicates a broken partial install.\n"
              "Please use 'openstack-install -u' to uninstall, "
              "and try again.\n"
              "(You may want to save a copy of ~/.cloud-install/commands.log"
              " for reporting a bug.)")
        sys.exit(1)

    log = logging.getLogger('cloudinstall')
    log.info('Starting OpenStack Installer v{}'.format(version))
    log.info('Start command: {}'.format(sys.argv))

    if os.geteuid() != 0:
        sys.exit(
            "Installing a cloud requires root privileges. Rerun with sudo")

    juju_path = config['settings.juju']['path']
    if not os.path.exists(juju_path):
        log.info("Creating juju directories: {}".format(juju_path))
        os.makedirs(juju_path)
        utils.chown(juju_path, utils.install_user(), utils.install_user())

    if os.path.isfile(os.path.join(CFG_DIR, 'installed')):
        msg = ("\n\nError:\n\n"
               "Previous installation detected. Did you mean to run "
               "openstack-status instead? \n"
               "If attempting to re-install please run "
               "    $ sudo openstack-install -u\n\n")
        print(msg)
        sys.exit(1)

    out = utils.get_command_output(
        '{} juju api-endpoints'.format(
            config['settings.juju']['home']), user_sudo=True)
    if out['status'] == 0:
        msg = ("Existing OpenStack environment detected. Please destroy "
               "that environment before proceeding with a new install.")
        print(msg)
        sys.exit(1)

    ui = OpenstackInstallUI()

    # Choose event loop
    ev = EventLoop(ui, config, log)

    try:
        install = InstallController(
            ui=ui, loop=ev)
    except Exception as e:
        print("Unable to start install controller: {}".format(e))
        sys.exit(1)

    log.info('Running {} release'.format(
        config['settings.openstack']['release']).capitalize())

    try:
        import atexit
        atexit.register(partial(utils.cleanup, config))
        install.start()
    except:
        log.error("Couldn't cleanup properly.")
    finally:
        sys.exit(ev.error_code)
